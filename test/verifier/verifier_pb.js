/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.verifier.DetectReq', null, global);
goog.exportSymbol('proto.verifier.DetectReq.Format', null, global);
goog.exportSymbol('proto.verifier.DetectRes', null, global);
goog.exportSymbol('proto.verifier.DetectRes.DetectInfo', null, global);
goog.exportSymbol('proto.verifier.DetectRes.TrackInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.DetectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectReq.displayName = 'proto.verifier.DetectReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    image: msg.getImage_asB64(),
    rows: jspb.Message.getField(msg, 4),
    cols: jspb.Message.getField(msg, 5),
    format: !msg.hasFormat() ? 1 : jspb.Message.getField(msg, 6),
    minfacesize: !msg.hasMinfacesize() ? 80 : jspb.Message.getField(msg, 7),
    maxfacesize: !msg.hasMaxfacesize() ? 300 : jspb.Message.getField(msg, 8),
    field: !msg.hasField() ? "normal" : jspb.Message.getField(msg, 9),
    imageid: jspb.Message.getField(msg, 10),
    cameraid: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectReq}
 */
proto.verifier.DetectReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectReq;
  return proto.verifier.DetectReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectReq}
 */
proto.verifier.DetectReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCols(value);
      break;
    case 6:
      var value = /** @type {!proto.verifier.DetectReq.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMinfacesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMaxfacesize(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getImage_asU8();
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getRows();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getCols();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getMinfacesize();
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = this.getMaxfacesize();
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = this.getField();
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getImageid();
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getCameraid();
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectReq} The clone.
 */
proto.verifier.DetectReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.DetectReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes image = 3;
 * @return {!(string|Uint8Array)}
 */
proto.verifier.DetectReq.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(this, 3));
};


/**
 * required bytes image = 3;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * required bytes image = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.verifier.DetectReq.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.verifier.DetectReq.prototype.setImage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectReq.prototype.clearImage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasImage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 rows = 4;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectReq.prototype.setRows = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectReq.prototype.clearRows = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasRows = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 cols = 5;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getCols = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectReq.prototype.setCols = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectReq.prototype.clearCols = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasCols = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required Format format = 6;
 * @return {!proto.verifier.DetectReq.Format}
 */
proto.verifier.DetectReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.DetectReq.Format} */ (!this.hasFormat() ? 1 : jspb.Message.getField(this, 6));
};


/** @param {proto.verifier.DetectReq.Format|undefined} value  */
proto.verifier.DetectReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint32 minfaceSize = 7;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getMinfacesize = function() {
  return /** @type {number} */ (!this.hasMinfacesize() ? 80 : jspb.Message.getField(this, 7));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setMinfacesize = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectReq.prototype.clearMinfacesize = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasMinfacesize = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional sint32 maxfaceSize = 8;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getMaxfacesize = function() {
  return /** @type {number} */ (!this.hasMaxfacesize() ? 300 : jspb.Message.getField(this, 8));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setMaxfacesize = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectReq.prototype.clearMaxfacesize = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasMaxfacesize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string field = 9;
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getField = function() {
  return /** @type {string} */ (!this.hasField() ? "normal" : jspb.Message.getField(this, 9));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setField = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.verifier.DetectReq.prototype.clearField = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasField = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string imageId = 10;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getImageid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 10));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setImageid = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.verifier.DetectReq.prototype.clearImageid = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasImageid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string cameraId = 11;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getCameraid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 11));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setCameraid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.verifier.DetectReq.prototype.clearCameraid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasCameraid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.verifier.DetectReq.Format = {
  MAT: 0,
  RGB: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.displayName = 'proto.verifier.DetectRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    detectnums: jspb.Message.getField(msg, 4),
    tracknums: jspb.Message.getField(msg, 5),
    detectList: jspb.Message.toObjectList(msg.getDetectList(),
    proto.verifier.DetectRes.DetectInfo.toObject, includeInstance),
    trackList: jspb.Message.toObjectList(msg.getTrackList(),
    proto.verifier.DetectRes.TrackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes}
 */
proto.verifier.DetectRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes;
  return proto.verifier.DetectRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes}
 */
proto.verifier.DetectRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDetectnums(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTracknums(value);
      break;
    case 6:
      var value = new proto.verifier.DetectRes.DetectInfo;
      reader.readMessage(value,proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader);
      msg.getDetectList().push(value);
      msg.setDetectList(msg.getDetectList());
      break;
    case 7:
      var value = new proto.verifier.DetectRes.TrackInfo;
      reader.readMessage(value,proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader);
      msg.getTrackList().push(value);
      msg.setTrackList(msg.getTrackList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getDetectnums();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getTracknums();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getDetectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.verifier.DetectRes.DetectInfo.serializeBinaryToWriter
    );
  }
  f = this.getTrackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.verifier.DetectRes.TrackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes} The clone.
 */
proto.verifier.DetectRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.DetectRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.DetectRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 detectNums = 4;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getDetectnums = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setDetectnums = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.prototype.clearDetectnums = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasDetectnums = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 trackNums = 5;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getTracknums = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setTracknums = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.prototype.clearTracknums = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasTracknums = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated DetectInfo detect = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.DetectRes.DetectInfo>}
 */
proto.verifier.DetectRes.prototype.getDetectList = function() {
  return /** @type{!Array.<!proto.verifier.DetectRes.DetectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.DetectRes.DetectInfo, 6));
};


/** @param {Array.<!proto.verifier.DetectRes.DetectInfo>|undefined} value  */
proto.verifier.DetectRes.prototype.setDetectList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.verifier.DetectRes.prototype.clearDetectList = function() {
  this.setDetectList([]);
};


/**
 * repeated TrackInfo track = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.DetectRes.TrackInfo>}
 */
proto.verifier.DetectRes.prototype.getTrackList = function() {
  return /** @type{!Array.<!proto.verifier.DetectRes.TrackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.DetectRes.TrackInfo, 7));
};


/** @param {Array.<!proto.verifier.DetectRes.TrackInfo>|undefined} value  */
proto.verifier.DetectRes.prototype.setTrackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.verifier.DetectRes.prototype.clearTrackList = function() {
  this.setTrackList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes.DetectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.DetectInfo.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes.DetectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.DetectInfo.displayName = 'proto.verifier.DetectRes.DetectInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.DetectInfo.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.DetectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.DetectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes.DetectInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.DetectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    height: jspb.Message.getField(msg, 4),
    sideface: jspb.Message.getField(msg, 5),
    quality: jspb.Message.getField(msg, 6),
    score: +jspb.Message.getField(msg, 7),
    glasses: jspb.Message.getField(msg, 8),
    xList: jspb.Message.getField(msg, 9),
    yList: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes.DetectInfo}
 */
proto.verifier.DetectRes.DetectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes.DetectInfo;
  return proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes.DetectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes.DetectInfo}
 */
proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSideface(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlasses(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setXList(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setYList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes.DetectInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.DetectInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.DetectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.DetectInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLeft();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getTop();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getWidth();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getSideface();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getQuality();
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getGlasses();
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = this.getXList();
  if (f.length > 0) {
    writer.writePackedSint32(
      9,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writePackedSint32(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes.DetectInfo} The clone.
 */
proto.verifier.DetectRes.DetectInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes.DetectInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 left = 1;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 top = 2;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 width = 3;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 height = 4;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 sideFace = 5;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getSideface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setSideface = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearSideface = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasSideface = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required sint32 quality = 6;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearQuality = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float score = 7;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required sint32 glasses = 8;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getGlasses = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setGlasses = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearGlasses = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasGlasses = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated sint32 x = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setXList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearXList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasXList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated sint32 y = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 10));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setYList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearYList = function() {
  jspb.Message.setField(this, 10, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasYList = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes.TrackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.TrackInfo.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes.TrackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.TrackInfo.displayName = 'proto.verifier.DetectRes.TrackInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.TrackInfo.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.TrackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.TrackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes.TrackInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.TrackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    height: jspb.Message.getField(msg, 4),
    sideface: jspb.Message.getField(msg, 5),
    quality: jspb.Message.getField(msg, 6),
    score: +jspb.Message.getField(msg, 7),
    glasses: jspb.Message.getField(msg, 8),
    xList: jspb.Message.getField(msg, 9),
    yList: jspb.Message.getField(msg, 10),
    imageid: jspb.Message.getField(msg, 11),
    intime: jspb.Message.getField(msg, 12),
    outtime: jspb.Message.getField(msg, 13),
    besttime: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes.TrackInfo}
 */
proto.verifier.DetectRes.TrackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes.TrackInfo;
  return proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes.TrackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes.TrackInfo}
 */
proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSideface(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlasses(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.getXList().push(value);
      msg.setXList(msg.getXList());
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.getYList().push(value);
      msg.setYList(msg.getYList());
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setIntime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setOuttime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setBesttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes.TrackInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.TrackInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.TrackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.TrackInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLeft();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getTop();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getWidth();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getSideface();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getQuality();
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getGlasses();
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = this.getXList();
  if (f.length > 0) {
    writer.writeRepeatedSint32(
      9,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writeRepeatedSint32(
      10,
      f
    );
  }
  f = this.getImageid();
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getIntime();
  if (f != null) {
    writer.writeFixed64(
      12,
      f
    );
  }
  f = this.getOuttime();
  if (f != null) {
    writer.writeFixed64(
      13,
      f
    );
  }
  f = this.getBesttime();
  if (f != null) {
    writer.writeFixed64(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes.TrackInfo} The clone.
 */
proto.verifier.DetectRes.TrackInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes.TrackInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 left = 1;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 top = 2;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 width = 3;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 height = 4;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 sideFace = 5;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getSideface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setSideface = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearSideface = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasSideface = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required sint32 quality = 6;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearQuality = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float score = 7;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required sint32 glasses = 8;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getGlasses = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setGlasses = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearGlasses = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasGlasses = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated sint32 x = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setXList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearXList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasXList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated sint32 y = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 10));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setYList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearYList = function() {
  jspb.Message.setField(this, 10, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasYList = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string imageId = 11;
 * @return {string}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getImageid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 11));
};


/** @param {string|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setImageid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearImageid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasImageid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required fixed64 inTime = 12;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getIntime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 12));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setIntime = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearIntime = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasIntime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required fixed64 outTIme = 13;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getOuttime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 13));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setOuttime = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearOuttime = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasOuttime = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required fixed64 bestTIme = 14;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getBesttime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 14));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setBesttime = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearBesttime = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasBesttime = function() {
  return jspb.Message.getField(this, 14) != null;
};


goog.object.extend(exports, proto.verifier);
