/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.verifier.AgeReq', null, global);
goog.exportSymbol('proto.verifier.AgeRes', null, global);
goog.exportSymbol('proto.verifier.AliveReq', null, global);
goog.exportSymbol('proto.verifier.AliveReq.LiveMeta', null, global);
goog.exportSymbol('proto.verifier.AliveRes', null, global);
goog.exportSymbol('proto.verifier.CompareReq', null, global);
goog.exportSymbol('proto.verifier.CompareRes', null, global);
goog.exportSymbol('proto.verifier.DeleteReq', null, global);
goog.exportSymbol('proto.verifier.DeleteRes', null, global);
goog.exportSymbol('proto.verifier.DetectReq', null, global);
goog.exportSymbol('proto.verifier.DetectRes', null, global);
goog.exportSymbol('proto.verifier.DetectRes.DetectInfo', null, global);
goog.exportSymbol('proto.verifier.DetectRes.TrackInfo', null, global);
goog.exportSymbol('proto.verifier.Feature', null, global);
goog.exportSymbol('proto.verifier.FeatureReq', null, global);
goog.exportSymbol('proto.verifier.FeatureRes', null, global);
goog.exportSymbol('proto.verifier.FeatureRes.FeatureInfo', null, global);
goog.exportSymbol('proto.verifier.Format', null, global);
goog.exportSymbol('proto.verifier.GenderReq', null, global);
goog.exportSymbol('proto.verifier.GenderRes', null, global);
goog.exportSymbol('proto.verifier.GenderRes.Gender', null, global);
goog.exportSymbol('proto.verifier.HairReq', null, global);
goog.exportSymbol('proto.verifier.HairRes', null, global);
goog.exportSymbol('proto.verifier.Image', null, global);
goog.exportSymbol('proto.verifier.Landmark', null, global);
goog.exportSymbol('proto.verifier.PedestrianReq', null, global);
goog.exportSymbol('proto.verifier.PedestrianRes', null, global);
goog.exportSymbol('proto.verifier.PedestrianRes.Location', null, global);
goog.exportSymbol('proto.verifier.RegisterReq', null, global);
goog.exportSymbol('proto.verifier.RegisterReq.Person', null, global);
goog.exportSymbol('proto.verifier.RegisterRes', null, global);
goog.exportSymbol('proto.verifier.RegisterRes.FailedInfo', null, global);
goog.exportSymbol('proto.verifier.RepoInfoReq', null, global);
goog.exportSymbol('proto.verifier.RepoInfoRes', null, global);
goog.exportSymbol('proto.verifier.SearchReq', null, global);
goog.exportSymbol('proto.verifier.SearchRes', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.Landmark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.Landmark.repeatedFields_, null);
};
goog.inherits(proto.verifier.Landmark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.Landmark.displayName = 'proto.verifier.Landmark';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.Landmark.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.Landmark.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.Landmark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.Landmark} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.Landmark.toObject = function(includeInstance, msg) {
  var f, obj = {
    xList: jspb.Message.getField(msg, 1),
    yList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.Landmark}
 */
proto.verifier.Landmark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.Landmark;
  return proto.verifier.Landmark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.Landmark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.Landmark}
 */
proto.verifier.Landmark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setXList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setYList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.Landmark} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Landmark.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.Landmark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Landmark.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXList();
  if (f.length > 0) {
    writer.writePackedSint32(
      1,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writePackedSint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.Landmark} The clone.
 */
proto.verifier.Landmark.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.Landmark} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated sint32 x = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.Landmark.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.Landmark.prototype.setXList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.verifier.Landmark.prototype.clearXList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Landmark.prototype.hasXList = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated sint32 y = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.Landmark.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.Landmark.prototype.setYList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.verifier.Landmark.prototype.clearYList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Landmark.prototype.hasYList = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.Feature.repeatedFields_, null);
};
goog.inherits(proto.verifier.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.Feature.displayName = 'proto.verifier.Feature';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.Feature.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.Feature} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    xList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.Feature}
 */
proto.verifier.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.Feature;
  return proto.verifier.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.Feature}
 */
proto.verifier.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.getXList().push(value);
      msg.setXList(msg.getXList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.Feature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Feature.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Feature.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.Feature} The clone.
 */
proto.verifier.Feature.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.Feature} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated float x = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.Feature.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.Feature.prototype.setXList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.verifier.Feature.prototype.clearXList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Feature.prototype.hasXList = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.Image.displayName = 'proto.verifier.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.Image} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    image: msg.getImage_asB64(),
    rows: jspb.Message.getField(msg, 2),
    cols: jspb.Message.getField(msg, 3),
    datalen: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.Image}
 */
proto.verifier.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.Image;
  return proto.verifier.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.Image}
 */
proto.verifier.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCols(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDatalen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.Image} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Image.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.Image.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImage_asU8();
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getRows();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getCols();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getDatalen();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.Image} The clone.
 */
proto.verifier.Image.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.Image} */ (jspb.Message.cloneMessage(this));
};


/**
 * required bytes image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.verifier.Image.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(this, 1));
};


/**
 * required bytes image = 1;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.verifier.Image.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * required bytes image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.verifier.Image.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.verifier.Image.prototype.setImage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.Image.prototype.clearImage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Image.prototype.hasImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 rows = 2;
 * @return {number?}
 */
proto.verifier.Image.prototype.getRows = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.verifier.Image.prototype.setRows = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.Image.prototype.clearRows = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Image.prototype.hasRows = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 cols = 3;
 * @return {number?}
 */
proto.verifier.Image.prototype.getCols = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 3));
};


/** @param {number?|undefined} value  */
proto.verifier.Image.prototype.setCols = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.Image.prototype.clearCols = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Image.prototype.hasCols = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 DataLen = 4;
 * @return {number?}
 */
proto.verifier.Image.prototype.getDatalen = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.verifier.Image.prototype.setDatalen = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.Image.prototype.clearDatalen = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.Image.prototype.hasDatalen = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RegisterReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.RegisterReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.RegisterReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RegisterReq.displayName = 'proto.verifier.RegisterReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.RegisterReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RegisterReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RegisterReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RegisterReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RegisterReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    peopleList: jspb.Message.toObjectList(msg.getPeopleList(),
    proto.verifier.RegisterReq.Person.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RegisterReq}
 */
proto.verifier.RegisterReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RegisterReq;
  return proto.verifier.RegisterReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RegisterReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RegisterReq}
 */
proto.verifier.RegisterReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.RegisterReq.Person;
      reader.readMessage(value,proto.verifier.RegisterReq.Person.deserializeBinaryFromReader);
      msg.getPeopleList().push(value);
      msg.setPeopleList(msg.getPeopleList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RegisterReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RegisterReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPeopleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.RegisterReq.Person.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RegisterReq} The clone.
 */
proto.verifier.RegisterReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RegisterReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.RegisterReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.RegisterReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.RegisterReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.RegisterReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.RegisterReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.RegisterReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.RegisterReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RegisterReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Person people = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.RegisterReq.Person>}
 */
proto.verifier.RegisterReq.prototype.getPeopleList = function() {
  return /** @type{!Array.<!proto.verifier.RegisterReq.Person>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.RegisterReq.Person, 4));
};


/** @param {Array.<!proto.verifier.RegisterReq.Person>|undefined} value  */
proto.verifier.RegisterReq.prototype.setPeopleList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.RegisterReq.prototype.clearPeopleList = function() {
  this.setPeopleList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.RegisterReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.RegisterReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.RegisterReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RegisterReq.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.RegisterReq.Person.repeatedFields_, null);
};
goog.inherits(proto.verifier.RegisterReq.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RegisterReq.Person.displayName = 'proto.verifier.RegisterReq.Person';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.RegisterReq.Person.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RegisterReq.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RegisterReq.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RegisterReq.Person} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RegisterReq.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    landmarksList: jspb.Message.toObjectList(msg.getLandmarksList(),
    proto.verifier.Landmark.toObject, includeInstance),
    faceid: jspb.Message.getField(msg, 3),
    groupid: !msg.hasGroupid() ? "watchlist" : jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RegisterReq.Person}
 */
proto.verifier.RegisterReq.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RegisterReq.Person;
  return proto.verifier.RegisterReq.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RegisterReq.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RegisterReq.Person}
 */
proto.verifier.RegisterReq.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 2:
      var value = new proto.verifier.Landmark;
      reader.readMessage(value,proto.verifier.Landmark.deserializeBinaryFromReader);
      msg.getLandmarksList().push(value);
      msg.setLandmarksList(msg.getLandmarksList());
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFaceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RegisterReq.Person} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterReq.Person.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RegisterReq.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterReq.Person.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getLandmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.verifier.Landmark.serializeBinaryToWriter
    );
  }
  f = this.getFaceid();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RegisterReq.Person} The clone.
 */
proto.verifier.RegisterReq.Person.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RegisterReq.Person} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Image images = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.RegisterReq.Person.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 1));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.RegisterReq.Person.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.verifier.RegisterReq.Person.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * repeated Landmark landmarks = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Landmark>}
 */
proto.verifier.RegisterReq.Person.prototype.getLandmarksList = function() {
  return /** @type{!Array.<!proto.verifier.Landmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Landmark, 2));
};


/** @param {Array.<!proto.verifier.Landmark>|undefined} value  */
proto.verifier.RegisterReq.Person.prototype.setLandmarksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.verifier.RegisterReq.Person.prototype.clearLandmarksList = function() {
  this.setLandmarksList([]);
};


/**
 * required sint32 faceId = 3;
 * @return {number}
 */
proto.verifier.RegisterReq.Person.prototype.getFaceid = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterReq.Person.prototype.setFaceid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RegisterReq.Person.prototype.clearFaceid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.Person.prototype.hasFaceid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string groupId = 4;
 * @return {string}
 */
proto.verifier.RegisterReq.Person.prototype.getGroupid = function() {
  return /** @type {string} */ (!this.hasGroupid() ? "watchlist" : jspb.Message.getField(this, 4));
};


/** @param {string|undefined} value  */
proto.verifier.RegisterReq.Person.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.RegisterReq.Person.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterReq.Person.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RegisterRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.RegisterRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.RegisterRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RegisterRes.displayName = 'proto.verifier.RegisterRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.RegisterRes.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RegisterRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RegisterRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RegisterRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RegisterRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    failedList: jspb.Message.toObjectList(msg.getFailedList(),
    proto.verifier.RegisterRes.FailedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RegisterRes}
 */
proto.verifier.RegisterRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RegisterRes;
  return proto.verifier.RegisterRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RegisterRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RegisterRes}
 */
proto.verifier.RegisterRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = new proto.verifier.RegisterRes.FailedInfo;
      reader.readMessage(value,proto.verifier.RegisterRes.FailedInfo.deserializeBinaryFromReader);
      msg.getFailedList().push(value);
      msg.setFailedList(msg.getFailedList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RegisterRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RegisterRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getFailedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.RegisterRes.FailedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RegisterRes} The clone.
 */
proto.verifier.RegisterRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RegisterRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.RegisterRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.RegisterRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.RegisterRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.RegisterRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.RegisterRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.RegisterRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RegisterRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated FailedInfo failed = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.RegisterRes.FailedInfo>}
 */
proto.verifier.RegisterRes.prototype.getFailedList = function() {
  return /** @type{!Array.<!proto.verifier.RegisterRes.FailedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.RegisterRes.FailedInfo, 4));
};


/** @param {Array.<!proto.verifier.RegisterRes.FailedInfo>|undefined} value  */
proto.verifier.RegisterRes.prototype.setFailedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.RegisterRes.prototype.clearFailedList = function() {
  this.setFailedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RegisterRes.FailedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.RegisterRes.FailedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RegisterRes.FailedInfo.displayName = 'proto.verifier.RegisterRes.FailedInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RegisterRes.FailedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RegisterRes.FailedInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RegisterRes.FailedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceid: jspb.Message.getField(msg, 1),
    groupid: jspb.Message.getField(msg, 2),
    message: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RegisterRes.FailedInfo}
 */
proto.verifier.RegisterRes.FailedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RegisterRes.FailedInfo;
  return proto.verifier.RegisterRes.FailedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RegisterRes.FailedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RegisterRes.FailedInfo}
 */
proto.verifier.RegisterRes.FailedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFaceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RegisterRes.FailedInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterRes.FailedInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RegisterRes.FailedInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFaceid();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RegisterRes.FailedInfo} The clone.
 */
proto.verifier.RegisterRes.FailedInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RegisterRes.FailedInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 faceId = 1;
 * @return {number}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.getFaceid = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterRes.FailedInfo.prototype.setFaceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.RegisterRes.FailedInfo.prototype.clearFaceid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.hasFaceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string groupId = 2;
 * @return {string}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.RegisterRes.FailedInfo.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.RegisterRes.FailedInfo.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 message = 3;
 * @return {number}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.getMessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.RegisterRes.FailedInfo.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RegisterRes.FailedInfo.prototype.clearMessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RegisterRes.FailedInfo.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.SearchReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.SearchReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.SearchReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.SearchReq.displayName = 'proto.verifier.SearchReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.SearchReq.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.SearchReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.SearchReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.SearchReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.SearchReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5),
    landmarksList: jspb.Message.toObjectList(msg.getLandmarksList(),
    proto.verifier.Landmark.toObject, includeInstance),
    groupid: !msg.hasGroupid() ? "watchlist" : jspb.Message.getField(msg, 7),
    topk: jspb.Message.getField(msg, 8),
    score: !msg.hasScore() ? 0.8 : +jspb.Message.getField(msg, 9),
    field: jspb.Message.getField(msg, 10),
    feature: (f = msg.getFeature()) && proto.verifier.Feature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.SearchReq}
 */
proto.verifier.SearchReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.SearchReq;
  return proto.verifier.SearchReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.SearchReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.SearchReq}
 */
proto.verifier.SearchReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 6:
      var value = new proto.verifier.Landmark;
      reader.readMessage(value,proto.verifier.Landmark.deserializeBinaryFromReader);
      msg.getLandmarksList().push(value);
      msg.setLandmarksList(msg.getLandmarksList());
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopk(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 11:
      var value = new proto.verifier.Feature;
      reader.readMessage(value,proto.verifier.Feature.deserializeBinaryFromReader);
      msg.setFeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.SearchReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.SearchReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.SearchReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.SearchReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getLandmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.verifier.Landmark.serializeBinaryToWriter
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getTopk();
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getField();
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getFeature();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.verifier.Feature.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.SearchReq} The clone.
 */
proto.verifier.SearchReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.SearchReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.SearchReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.SearchReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.SearchReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.SearchReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.SearchReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.SearchReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.SearchReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.SearchReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.SearchReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.SearchReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.SearchReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.SearchReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.SearchReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.SearchReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.SearchReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Landmark landmarks = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Landmark>}
 */
proto.verifier.SearchReq.prototype.getLandmarksList = function() {
  return /** @type{!Array.<!proto.verifier.Landmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Landmark, 6));
};


/** @param {Array.<!proto.verifier.Landmark>|undefined} value  */
proto.verifier.SearchReq.prototype.setLandmarksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.verifier.SearchReq.prototype.clearLandmarksList = function() {
  this.setLandmarksList([]);
};


/**
 * required string groupId = 7;
 * @return {string}
 */
proto.verifier.SearchReq.prototype.getGroupid = function() {
  return /** @type {string} */ (!this.hasGroupid() ? "watchlist" : jspb.Message.getField(this, 7));
};


/** @param {string|undefined} value  */
proto.verifier.SearchReq.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.SearchReq.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 topk = 8;
 * @return {number}
 */
proto.verifier.SearchReq.prototype.getTopk = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.verifier.SearchReq.prototype.setTopk = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.SearchReq.prototype.clearTopk = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasTopk = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float score = 9;
 * @return {number}
 */
proto.verifier.SearchReq.prototype.getScore = function() {
  return /** @type {number} */ (!this.hasScore() ? 0.8 : +jspb.Message.getField(this, 9));
};


/** @param {number|undefined} value  */
proto.verifier.SearchReq.prototype.setScore = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.verifier.SearchReq.prototype.clearScore = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasScore = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string field = 10;
 * @return {string?}
 */
proto.verifier.SearchReq.prototype.getField = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 10));
};


/** @param {string?|undefined} value  */
proto.verifier.SearchReq.prototype.setField = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.verifier.SearchReq.prototype.clearField = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchReq.prototype.hasField = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Feature feature = 11;
 * @return {proto.verifier.Feature}
 */
proto.verifier.SearchReq.prototype.getFeature = function() {
  return /** @type{proto.verifier.Feature} */ (
    jspb.Message.getWrapperField(this, proto.verifier.Feature, 11));
};


/** @param {proto.verifier.Feature|undefined} value  */
proto.verifier.SearchReq.prototype.setFeature = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.verifier.SearchReq.prototype.clearFeature = function() {
  this.setFeature(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.SearchRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.SearchRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.SearchRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.SearchRes.displayName = 'proto.verifier.SearchRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.SearchRes.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.SearchRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.SearchRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.SearchRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.SearchRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    faceidsList: jspb.Message.getField(msg, 4),
    scoreList: jspb.Message.getRepeatedFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.SearchRes}
 */
proto.verifier.SearchRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.SearchRes;
  return proto.verifier.SearchRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.SearchRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.SearchRes}
 */
proto.verifier.SearchRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.getFaceidsList().push(value);
      msg.setFaceidsList(msg.getFaceidsList());
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.getScoreList().push(value);
      msg.setScoreList(msg.getScoreList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.SearchRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.SearchRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.SearchRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.SearchRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getFaceidsList();
  if (f.length > 0) {
    writer.writeRepeatedSint32(
      4,
      f
    );
  }
  f = this.getScoreList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.SearchRes} The clone.
 */
proto.verifier.SearchRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.SearchRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.SearchRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.SearchRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.SearchRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.SearchRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.SearchRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.SearchRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.SearchRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.SearchRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.SearchRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated sint32 faceIds = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.SearchRes.prototype.getFaceidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.SearchRes.prototype.setFaceidsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.verifier.SearchRes.prototype.clearFaceidsList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchRes.prototype.hasFaceidsList = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated float score = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.SearchRes.prototype.getScoreList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.SearchRes.prototype.setScoreList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.verifier.SearchRes.prototype.clearScoreList = function() {
  jspb.Message.setField(this, 5, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.SearchRes.prototype.hasScoreList = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DeleteReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.DeleteReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DeleteReq.displayName = 'proto.verifier.DeleteReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DeleteReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DeleteReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DeleteReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DeleteReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    faceid: jspb.Message.getField(msg, 4),
    groupid: !msg.hasGroupid() ? "watchlist" : jspb.Message.getField(msg, 5),
    field: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DeleteReq}
 */
proto.verifier.DeleteReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DeleteReq;
  return proto.verifier.DeleteReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DeleteReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DeleteReq}
 */
proto.verifier.DeleteReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFaceid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DeleteReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DeleteReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DeleteReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DeleteReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFaceid();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getField();
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DeleteReq} The clone.
 */
proto.verifier.DeleteReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DeleteReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.DeleteReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DeleteReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DeleteReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.DeleteReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.DeleteReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DeleteReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.DeleteReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.DeleteReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DeleteReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 faceId = 4;
 * @return {number}
 */
proto.verifier.DeleteReq.prototype.getFaceid = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DeleteReq.prototype.setFaceid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DeleteReq.prototype.clearFaceid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasFaceid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string groupId = 5;
 * @return {string}
 */
proto.verifier.DeleteReq.prototype.getGroupid = function() {
  return /** @type {string} */ (!this.hasGroupid() ? "watchlist" : jspb.Message.getField(this, 5));
};


/** @param {string|undefined} value  */
proto.verifier.DeleteReq.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DeleteReq.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string field = 6;
 * @return {string?}
 */
proto.verifier.DeleteReq.prototype.getField = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 6));
};


/** @param {string?|undefined} value  */
proto.verifier.DeleteReq.prototype.setField = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DeleteReq.prototype.clearField = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteReq.prototype.hasField = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DeleteRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.DeleteRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DeleteRes.displayName = 'proto.verifier.DeleteRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DeleteRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DeleteRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DeleteRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DeleteRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DeleteRes}
 */
proto.verifier.DeleteRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DeleteRes;
  return proto.verifier.DeleteRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DeleteRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DeleteRes}
 */
proto.verifier.DeleteRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DeleteRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DeleteRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DeleteRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DeleteRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DeleteRes} The clone.
 */
proto.verifier.DeleteRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DeleteRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.DeleteRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.DeleteRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DeleteRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.DeleteRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DeleteRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DeleteRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.DeleteRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DeleteRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DeleteRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DeleteRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.CompareReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.CompareReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.CompareReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.CompareReq.displayName = 'proto.verifier.CompareReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.CompareReq.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.CompareReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.CompareReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.CompareReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.CompareReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5),
    landmarksList: jspb.Message.toObjectList(msg.getLandmarksList(),
    proto.verifier.Landmark.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.CompareReq}
 */
proto.verifier.CompareReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.CompareReq;
  return proto.verifier.CompareReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.CompareReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.CompareReq}
 */
proto.verifier.CompareReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 6:
      var value = new proto.verifier.Landmark;
      reader.readMessage(value,proto.verifier.Landmark.deserializeBinaryFromReader);
      msg.getLandmarksList().push(value);
      msg.setLandmarksList(msg.getLandmarksList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.CompareReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.CompareReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.CompareReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.CompareReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getLandmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.verifier.Landmark.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.CompareReq} The clone.
 */
proto.verifier.CompareReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.CompareReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.CompareReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.CompareReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.CompareReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.CompareReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.CompareReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.CompareReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.CompareReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.CompareReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.CompareReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.CompareReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.CompareReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.CompareReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.CompareReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.CompareReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.CompareReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Landmark landmarks = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Landmark>}
 */
proto.verifier.CompareReq.prototype.getLandmarksList = function() {
  return /** @type{!Array.<!proto.verifier.Landmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Landmark, 6));
};


/** @param {Array.<!proto.verifier.Landmark>|undefined} value  */
proto.verifier.CompareReq.prototype.setLandmarksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.verifier.CompareReq.prototype.clearLandmarksList = function() {
  this.setLandmarksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.CompareRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.CompareRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.CompareRes.displayName = 'proto.verifier.CompareRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.CompareRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.CompareRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.CompareRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.CompareRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    score: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.CompareRes}
 */
proto.verifier.CompareRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.CompareRes;
  return proto.verifier.CompareRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.CompareRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.CompareRes}
 */
proto.verifier.CompareRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.CompareRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.CompareRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.CompareRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.CompareRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.CompareRes} The clone.
 */
proto.verifier.CompareRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.CompareRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.CompareRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.CompareRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.CompareRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.CompareRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.CompareRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.CompareRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.CompareRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.CompareRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.CompareRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float score = 4;
 * @return {number?}
 */
proto.verifier.CompareRes.prototype.getScore = function() {
  return /** @type {number?} */ (jspb.Message.getOptionalFloatingPointField(this, 4));
};


/** @param {number?|undefined} value  */
proto.verifier.CompareRes.prototype.setScore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.CompareRes.prototype.clearScore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.CompareRes.prototype.hasScore = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.DetectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectReq.displayName = 'proto.verifier.DetectReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    image: msg.getImage_asB64(),
    rows: jspb.Message.getField(msg, 5),
    cols: jspb.Message.getField(msg, 6),
    datalen: jspb.Message.getField(msg, 7),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 8),
    minfacesize: !msg.hasMinfacesize() ? 80 : jspb.Message.getField(msg, 9),
    maxfacesize: !msg.hasMaxfacesize() ? 300 : jspb.Message.getField(msg, 10),
    field: !msg.hasField() ? "normal" : jspb.Message.getField(msg, 11),
    imageid: jspb.Message.getField(msg, 12),
    cameraid: jspb.Message.getField(msg, 13),
    classify: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectReq}
 */
proto.verifier.DetectReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectReq;
  return proto.verifier.DetectReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectReq}
 */
proto.verifier.DetectReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRows(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCols(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDatalen(value);
      break;
    case 8:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMinfacesize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMaxfacesize(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameraid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImage_asU8();
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getRows();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getCols();
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getDatalen();
  if (f != null) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = this.getMinfacesize();
  if (f != null) {
    writer.writeSint32(
      9,
      f
    );
  }
  f = this.getMaxfacesize();
  if (f != null) {
    writer.writeSint32(
      10,
      f
    );
  }
  f = this.getField();
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getImageid();
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getCameraid();
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getClassify();
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectReq} The clone.
 */
proto.verifier.DetectReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.DetectReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bytes image = 4;
 * @return {!(string|Uint8Array)}
 */
proto.verifier.DetectReq.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(this, 4));
};


/**
 * required bytes image = 4;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * required bytes image = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.verifier.DetectReq.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.verifier.DetectReq.prototype.setImage = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectReq.prototype.clearImage = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasImage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 rows = 5;
 * @return {number?}
 */
proto.verifier.DetectReq.prototype.getRows = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 5));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setRows = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectReq.prototype.clearRows = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasRows = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 cols = 6;
 * @return {number?}
 */
proto.verifier.DetectReq.prototype.getCols = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 6));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setCols = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectReq.prototype.clearCols = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasCols = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint32 DataLen = 7;
 * @return {number?}
 */
proto.verifier.DetectReq.prototype.getDatalen = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 7));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setDatalen = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectReq.prototype.clearDatalen = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasDatalen = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required Format format = 8;
 * @return {!proto.verifier.Format}
 */
proto.verifier.DetectReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 8));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.DetectReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional sint32 minfaceSize = 9;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getMinfacesize = function() {
  return /** @type {number} */ (!this.hasMinfacesize() ? 80 : jspb.Message.getField(this, 9));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setMinfacesize = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.verifier.DetectReq.prototype.clearMinfacesize = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasMinfacesize = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional sint32 maxfaceSize = 10;
 * @return {number}
 */
proto.verifier.DetectReq.prototype.getMaxfacesize = function() {
  return /** @type {number} */ (!this.hasMaxfacesize() ? 300 : jspb.Message.getField(this, 10));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectReq.prototype.setMaxfacesize = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.verifier.DetectReq.prototype.clearMaxfacesize = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasMaxfacesize = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string field = 11;
 * @return {string}
 */
proto.verifier.DetectReq.prototype.getField = function() {
  return /** @type {string} */ (!this.hasField() ? "normal" : jspb.Message.getField(this, 11));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setField = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.verifier.DetectReq.prototype.clearField = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasField = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string imageId = 12;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getImageid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 12));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setImageid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.verifier.DetectReq.prototype.clearImageid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasImageid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string cameraId = 13;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getCameraid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 13));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setCameraid = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.verifier.DetectReq.prototype.clearCameraid = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasCameraid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string classify = 14;
 * @return {string?}
 */
proto.verifier.DetectReq.prototype.getClassify = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 14));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectReq.prototype.setClassify = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.verifier.DetectReq.prototype.clearClassify = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectReq.prototype.hasClassify = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.displayName = 'proto.verifier.DetectRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    detectnums: jspb.Message.getField(msg, 4),
    tracknums: jspb.Message.getField(msg, 5),
    detectList: jspb.Message.toObjectList(msg.getDetectList(),
    proto.verifier.DetectRes.DetectInfo.toObject, includeInstance),
    trackList: jspb.Message.toObjectList(msg.getTrackList(),
    proto.verifier.DetectRes.TrackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes}
 */
proto.verifier.DetectRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes;
  return proto.verifier.DetectRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes}
 */
proto.verifier.DetectRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDetectnums(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTracknums(value);
      break;
    case 6:
      var value = new proto.verifier.DetectRes.DetectInfo;
      reader.readMessage(value,proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader);
      msg.getDetectList().push(value);
      msg.setDetectList(msg.getDetectList());
      break;
    case 7:
      var value = new proto.verifier.DetectRes.TrackInfo;
      reader.readMessage(value,proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader);
      msg.getTrackList().push(value);
      msg.setTrackList(msg.getTrackList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getDetectnums();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getTracknums();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getDetectList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.verifier.DetectRes.DetectInfo.serializeBinaryToWriter
    );
  }
  f = this.getTrackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.verifier.DetectRes.TrackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes} The clone.
 */
proto.verifier.DetectRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.DetectRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.DetectRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.DetectRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 detectNums = 4;
 * @return {number?}
 */
proto.verifier.DetectRes.prototype.getDetectnums = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectRes.prototype.setDetectnums = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.prototype.clearDetectnums = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasDetectnums = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 trackNums = 5;
 * @return {number?}
 */
proto.verifier.DetectRes.prototype.getTracknums = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 5));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectRes.prototype.setTracknums = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.prototype.clearTracknums = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.prototype.hasTracknums = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated DetectInfo detect = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.DetectRes.DetectInfo>}
 */
proto.verifier.DetectRes.prototype.getDetectList = function() {
  return /** @type{!Array.<!proto.verifier.DetectRes.DetectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.DetectRes.DetectInfo, 6));
};


/** @param {Array.<!proto.verifier.DetectRes.DetectInfo>|undefined} value  */
proto.verifier.DetectRes.prototype.setDetectList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.verifier.DetectRes.prototype.clearDetectList = function() {
  this.setDetectList([]);
};


/**
 * repeated TrackInfo track = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.DetectRes.TrackInfo>}
 */
proto.verifier.DetectRes.prototype.getTrackList = function() {
  return /** @type{!Array.<!proto.verifier.DetectRes.TrackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.DetectRes.TrackInfo, 7));
};


/** @param {Array.<!proto.verifier.DetectRes.TrackInfo>|undefined} value  */
proto.verifier.DetectRes.prototype.setTrackList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.verifier.DetectRes.prototype.clearTrackList = function() {
  this.setTrackList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes.DetectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.DetectInfo.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes.DetectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.DetectInfo.displayName = 'proto.verifier.DetectRes.DetectInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.DetectInfo.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.DetectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.DetectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes.DetectInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.DetectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    height: jspb.Message.getField(msg, 4),
    sideface: jspb.Message.getField(msg, 5),
    quality: jspb.Message.getField(msg, 6),
    score: +jspb.Message.getField(msg, 7),
    glasses: jspb.Message.getField(msg, 8),
    xList: jspb.Message.getField(msg, 9),
    yList: jspb.Message.getField(msg, 10),
    female: jspb.Message.getOptionalFloatingPointField(msg, 11),
    male: jspb.Message.getOptionalFloatingPointField(msg, 12),
    age: jspb.Message.getField(msg, 13),
    hair: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes.DetectInfo}
 */
proto.verifier.DetectRes.DetectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes.DetectInfo;
  return proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes.DetectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes.DetectInfo}
 */
proto.verifier.DetectRes.DetectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSideface(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlasses(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setXList(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setYList(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFemale(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMale(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAge(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setHair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes.DetectInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.DetectInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.DetectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.DetectInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLeft();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getTop();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getWidth();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getSideface();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getQuality();
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getGlasses();
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = this.getXList();
  if (f.length > 0) {
    writer.writePackedSint32(
      9,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writePackedSint32(
      10,
      f
    );
  }
  f = this.getFemale();
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = this.getMale();
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = this.getAge();
  if (f != null) {
    writer.writeSint32(
      13,
      f
    );
  }
  f = this.getHair();
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes.DetectInfo} The clone.
 */
proto.verifier.DetectRes.DetectInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes.DetectInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 left = 1;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 top = 2;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 width = 3;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 height = 4;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 sideFace = 5;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getSideface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setSideface = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearSideface = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasSideface = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required sint32 quality = 6;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearQuality = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float score = 7;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required sint32 glasses = 8;
 * @return {number}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getGlasses = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setGlasses = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearGlasses = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasGlasses = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated sint32 x = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setXList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearXList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasXList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated sint32 y = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 10));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setYList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearYList = function() {
  jspb.Message.setField(this, 10, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasYList = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float female = 11;
 * @return {number?}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getFemale = function() {
  return /** @type {number?} */ (jspb.Message.getOptionalFloatingPointField(this, 11));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setFemale = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearFemale = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasFemale = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float male = 12;
 * @return {number?}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getMale = function() {
  return /** @type {number?} */ (jspb.Message.getOptionalFloatingPointField(this, 12));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setMale = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearMale = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasMale = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional sint32 age = 13;
 * @return {number?}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getAge = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 13));
};


/** @param {number?|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setAge = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearAge = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasAge = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string hair = 14;
 * @return {string?}
 */
proto.verifier.DetectRes.DetectInfo.prototype.getHair = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 14));
};


/** @param {string?|undefined} value  */
proto.verifier.DetectRes.DetectInfo.prototype.setHair = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.verifier.DetectRes.DetectInfo.prototype.clearHair = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.DetectInfo.prototype.hasHair = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.DetectRes.TrackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.DetectRes.TrackInfo.repeatedFields_, null);
};
goog.inherits(proto.verifier.DetectRes.TrackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.DetectRes.TrackInfo.displayName = 'proto.verifier.DetectRes.TrackInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.DetectRes.TrackInfo.repeatedFields_ = [9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.DetectRes.TrackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.DetectRes.TrackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.DetectRes.TrackInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.DetectRes.TrackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: jspb.Message.getField(msg, 1),
    top: jspb.Message.getField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    height: jspb.Message.getField(msg, 4),
    sideface: jspb.Message.getField(msg, 5),
    quality: jspb.Message.getField(msg, 6),
    score: +jspb.Message.getField(msg, 7),
    glasses: jspb.Message.getField(msg, 8),
    xList: jspb.Message.getField(msg, 9),
    yList: jspb.Message.getField(msg, 10),
    imageid: jspb.Message.getField(msg, 11),
    intime: jspb.Message.getField(msg, 12),
    outtime: jspb.Message.getField(msg, 13),
    besttime: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.DetectRes.TrackInfo}
 */
proto.verifier.DetectRes.TrackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.DetectRes.TrackInfo;
  return proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.DetectRes.TrackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.DetectRes.TrackInfo}
 */
proto.verifier.DetectRes.TrackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTop(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSideface(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlasses(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setXList(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint32());
      msg.setYList(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setIntime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setOuttime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setBesttime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.DetectRes.TrackInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.TrackInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.DetectRes.TrackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.DetectRes.TrackInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLeft();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getTop();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getWidth();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getSideface();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = this.getQuality();
  if (f != null) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getScore();
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getGlasses();
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = this.getXList();
  if (f.length > 0) {
    writer.writePackedSint32(
      9,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writePackedSint32(
      10,
      f
    );
  }
  f = this.getImageid();
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getIntime();
  if (f != null) {
    writer.writeFixed64(
      12,
      f
    );
  }
  f = this.getOuttime();
  if (f != null) {
    writer.writeFixed64(
      13,
      f
    );
  }
  f = this.getBesttime();
  if (f != null) {
    writer.writeFixed64(
      14,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.DetectRes.TrackInfo} The clone.
 */
proto.verifier.DetectRes.TrackInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.DetectRes.TrackInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 left = 1;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearLeft = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 top = 2;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setTop = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearTop = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 width = 3;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 height = 4;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required sint32 sideFace = 5;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getSideface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setSideface = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearSideface = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasSideface = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required sint32 quality = 6;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearQuality = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float score = 7;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required sint32 glasses = 8;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getGlasses = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setGlasses = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearGlasses = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasGlasses = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated sint32 x = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 9));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setXList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearXList = function() {
  jspb.Message.setField(this, 9, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasXList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated sint32 y = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 10));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setYList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearYList = function() {
  jspb.Message.setField(this, 10, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasYList = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string imageId = 11;
 * @return {string}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getImageid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 11));
};


/** @param {string|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setImageid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearImageid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasImageid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required fixed64 inTime = 12;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getIntime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 12));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setIntime = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearIntime = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasIntime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required fixed64 outTIme = 13;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getOuttime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 13));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setOuttime = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearOuttime = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasOuttime = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required fixed64 bestTIme = 14;
 * @return {number}
 */
proto.verifier.DetectRes.TrackInfo.prototype.getBesttime = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 14));
};


/** @param {number|undefined} value  */
proto.verifier.DetectRes.TrackInfo.prototype.setBesttime = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.verifier.DetectRes.TrackInfo.prototype.clearBesttime = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.DetectRes.TrackInfo.prototype.hasBesttime = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.FeatureReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.FeatureReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.FeatureReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.FeatureReq.displayName = 'proto.verifier.FeatureReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.FeatureReq.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.FeatureReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.FeatureReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.FeatureReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.FeatureReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5),
    landmarksList: jspb.Message.toObjectList(msg.getLandmarksList(),
    proto.verifier.Landmark.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.FeatureReq}
 */
proto.verifier.FeatureReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.FeatureReq;
  return proto.verifier.FeatureReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.FeatureReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.FeatureReq}
 */
proto.verifier.FeatureReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 6:
      var value = new proto.verifier.Landmark;
      reader.readMessage(value,proto.verifier.Landmark.deserializeBinaryFromReader);
      msg.getLandmarksList().push(value);
      msg.setLandmarksList(msg.getLandmarksList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.FeatureReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.FeatureReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getLandmarksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.verifier.Landmark.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.FeatureReq} The clone.
 */
proto.verifier.FeatureReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.FeatureReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.FeatureReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.FeatureReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.FeatureReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.FeatureReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.FeatureReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.FeatureReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.FeatureReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.FeatureReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.FeatureReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.FeatureReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.FeatureReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.FeatureReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.FeatureReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.FeatureReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.FeatureReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Landmark landmarks = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Landmark>}
 */
proto.verifier.FeatureReq.prototype.getLandmarksList = function() {
  return /** @type{!Array.<!proto.verifier.Landmark>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Landmark, 6));
};


/** @param {Array.<!proto.verifier.Landmark>|undefined} value  */
proto.verifier.FeatureReq.prototype.setLandmarksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.verifier.FeatureReq.prototype.clearLandmarksList = function() {
  this.setLandmarksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.FeatureRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.FeatureRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.FeatureRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.FeatureRes.displayName = 'proto.verifier.FeatureRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.FeatureRes.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.FeatureRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.FeatureRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.FeatureRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.FeatureRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    dimension: jspb.Message.getField(msg, 4),
    featureList: jspb.Message.toObjectList(msg.getFeatureList(),
    proto.verifier.FeatureRes.FeatureInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.FeatureRes}
 */
proto.verifier.FeatureRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.FeatureRes;
  return proto.verifier.FeatureRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.FeatureRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.FeatureRes}
 */
proto.verifier.FeatureRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDimension(value);
      break;
    case 5:
      var value = new proto.verifier.FeatureRes.FeatureInfo;
      reader.readMessage(value,proto.verifier.FeatureRes.FeatureInfo.deserializeBinaryFromReader);
      msg.getFeatureList().push(value);
      msg.setFeatureList(msg.getFeatureList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.FeatureRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.FeatureRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getDimension();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getFeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.verifier.FeatureRes.FeatureInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.FeatureRes} The clone.
 */
proto.verifier.FeatureRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.FeatureRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.FeatureRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.FeatureRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.FeatureRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.FeatureRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.FeatureRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.FeatureRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.FeatureRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.FeatureRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.FeatureRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 dimension = 4;
 * @return {number?}
 */
proto.verifier.FeatureRes.prototype.getDimension = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.verifier.FeatureRes.prototype.setDimension = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.FeatureRes.prototype.clearDimension = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureRes.prototype.hasDimension = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated FeatureInfo feature = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.FeatureRes.FeatureInfo>}
 */
proto.verifier.FeatureRes.prototype.getFeatureList = function() {
  return /** @type{!Array.<!proto.verifier.FeatureRes.FeatureInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.FeatureRes.FeatureInfo, 5));
};


/** @param {Array.<!proto.verifier.FeatureRes.FeatureInfo>|undefined} value  */
proto.verifier.FeatureRes.prototype.setFeatureList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.verifier.FeatureRes.prototype.clearFeatureList = function() {
  this.setFeatureList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.FeatureRes.FeatureInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.FeatureRes.FeatureInfo.repeatedFields_, null);
};
goog.inherits(proto.verifier.FeatureRes.FeatureInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.FeatureRes.FeatureInfo.displayName = 'proto.verifier.FeatureRes.FeatureInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.FeatureRes.FeatureInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.FeatureRes.FeatureInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.FeatureRes.FeatureInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.FeatureRes.FeatureInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    xList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.FeatureRes.FeatureInfo}
 */
proto.verifier.FeatureRes.FeatureInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.FeatureRes.FeatureInfo;
  return proto.verifier.FeatureRes.FeatureInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.FeatureRes.FeatureInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.FeatureRes.FeatureInfo}
 */
proto.verifier.FeatureRes.FeatureInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.getXList().push(value);
      msg.setXList(msg.getXList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.FeatureRes.FeatureInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureRes.FeatureInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.FeatureRes.FeatureInfo} The clone.
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.FeatureRes.FeatureInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated float x = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {Array.<number>|undefined} value  */
proto.verifier.FeatureRes.FeatureInfo.prototype.setXList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


proto.verifier.FeatureRes.FeatureInfo.prototype.clearXList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.FeatureRes.FeatureInfo.prototype.hasXList = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.GenderReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.GenderReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.GenderReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.GenderReq.displayName = 'proto.verifier.GenderReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.GenderReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.GenderReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.GenderReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.GenderReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.GenderReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.GenderReq}
 */
proto.verifier.GenderReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.GenderReq;
  return proto.verifier.GenderReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.GenderReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.GenderReq}
 */
proto.verifier.GenderReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.GenderReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.GenderReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.GenderReq} The clone.
 */
proto.verifier.GenderReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.GenderReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.GenderReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.GenderReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.GenderReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.GenderReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.GenderReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.GenderReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.GenderReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.GenderReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.GenderReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.GenderReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.GenderReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.GenderReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.GenderReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.GenderReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.GenderReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.GenderRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.GenderRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.GenderRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.GenderRes.displayName = 'proto.verifier.GenderRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.GenderRes.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.GenderRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.GenderRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.GenderRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.GenderRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    genderList: jspb.Message.toObjectList(msg.getGenderList(),
    proto.verifier.GenderRes.Gender.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.GenderRes}
 */
proto.verifier.GenderRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.GenderRes;
  return proto.verifier.GenderRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.GenderRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.GenderRes}
 */
proto.verifier.GenderRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = new proto.verifier.GenderRes.Gender;
      reader.readMessage(value,proto.verifier.GenderRes.Gender.deserializeBinaryFromReader);
      msg.getGenderList().push(value);
      msg.setGenderList(msg.getGenderList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.GenderRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.GenderRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getGenderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.GenderRes.Gender.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.GenderRes} The clone.
 */
proto.verifier.GenderRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.GenderRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.GenderRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.GenderRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.GenderRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.GenderRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.GenderRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.GenderRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.GenderRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.GenderRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.GenderRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Gender gender = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.GenderRes.Gender>}
 */
proto.verifier.GenderRes.prototype.getGenderList = function() {
  return /** @type{!Array.<!proto.verifier.GenderRes.Gender>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.GenderRes.Gender, 4));
};


/** @param {Array.<!proto.verifier.GenderRes.Gender>|undefined} value  */
proto.verifier.GenderRes.prototype.setGenderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.GenderRes.prototype.clearGenderList = function() {
  this.setGenderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.GenderRes.Gender = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.GenderRes.Gender, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.GenderRes.Gender.displayName = 'proto.verifier.GenderRes.Gender';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.GenderRes.Gender.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.GenderRes.Gender.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.GenderRes.Gender} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.GenderRes.Gender.toObject = function(includeInstance, msg) {
  var f, obj = {
    female: +jspb.Message.getField(msg, 1),
    male: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.GenderRes.Gender}
 */
proto.verifier.GenderRes.Gender.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.GenderRes.Gender;
  return proto.verifier.GenderRes.Gender.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.GenderRes.Gender} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.GenderRes.Gender}
 */
proto.verifier.GenderRes.Gender.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFemale(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.GenderRes.Gender} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderRes.Gender.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.GenderRes.Gender.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.GenderRes.Gender.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFemale();
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getMale();
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.GenderRes.Gender} The clone.
 */
proto.verifier.GenderRes.Gender.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.GenderRes.Gender} */ (jspb.Message.cloneMessage(this));
};


/**
 * required float Female = 1;
 * @return {number}
 */
proto.verifier.GenderRes.Gender.prototype.getFemale = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.GenderRes.Gender.prototype.setFemale = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.GenderRes.Gender.prototype.clearFemale = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderRes.Gender.prototype.hasFemale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Male = 2;
 * @return {number}
 */
proto.verifier.GenderRes.Gender.prototype.getMale = function() {
  return /** @type {number} */ (+jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.GenderRes.Gender.prototype.setMale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.GenderRes.Gender.prototype.clearMale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.GenderRes.Gender.prototype.hasMale = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.AgeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.AgeReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.AgeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.AgeReq.displayName = 'proto.verifier.AgeReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.AgeReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.AgeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.AgeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.AgeReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.AgeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.AgeReq}
 */
proto.verifier.AgeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.AgeReq;
  return proto.verifier.AgeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.AgeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.AgeReq}
 */
proto.verifier.AgeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.AgeReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AgeReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.AgeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AgeReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.AgeReq} The clone.
 */
proto.verifier.AgeReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.AgeReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.AgeReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.AgeReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.AgeReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.AgeReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.AgeReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.AgeReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.AgeReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.AgeReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.AgeReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.AgeReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.AgeReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.AgeReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.AgeReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.AgeReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.AgeReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.AgeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.AgeRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.AgeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.AgeRes.displayName = 'proto.verifier.AgeRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.AgeRes.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.AgeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.AgeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.AgeRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.AgeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    ageList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.AgeRes}
 */
proto.verifier.AgeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.AgeRes;
  return proto.verifier.AgeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.AgeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.AgeRes}
 */
proto.verifier.AgeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getAgeList().push(value);
      msg.setAgeList(msg.getAgeList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.AgeRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AgeRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.AgeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AgeRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getAgeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.AgeRes} The clone.
 */
proto.verifier.AgeRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.AgeRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.AgeRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.AgeRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.AgeRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.AgeRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.AgeRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.AgeRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.AgeRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.AgeRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.AgeRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string age = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.verifier.AgeRes.prototype.getAgeList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>|undefined} value  */
proto.verifier.AgeRes.prototype.setAgeList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.verifier.AgeRes.prototype.clearAgeList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AgeRes.prototype.hasAgeList = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.AliveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.AliveReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.AliveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.AliveReq.displayName = 'proto.verifier.AliveReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.AliveReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.AliveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.AliveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.AliveReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.AliveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    liveList: jspb.Message.toObjectList(msg.getLiveList(),
    proto.verifier.AliveReq.LiveMeta.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.AliveReq}
 */
proto.verifier.AliveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.AliveReq;
  return proto.verifier.AliveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.AliveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.AliveReq}
 */
proto.verifier.AliveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.AliveReq.LiveMeta;
      reader.readMessage(value,proto.verifier.AliveReq.LiveMeta.deserializeBinaryFromReader);
      msg.getLiveList().push(value);
      msg.setLiveList(msg.getLiveList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.AliveReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.AliveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getLiveList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.AliveReq.LiveMeta.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.AliveReq} The clone.
 */
proto.verifier.AliveReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.AliveReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.AliveReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.AliveReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.AliveReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.AliveReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.AliveReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.AliveReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.AliveReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.AliveReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.AliveReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated LiveMeta live = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.AliveReq.LiveMeta>}
 */
proto.verifier.AliveReq.prototype.getLiveList = function() {
  return /** @type{!Array.<!proto.verifier.AliveReq.LiveMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.AliveReq.LiveMeta, 4));
};


/** @param {Array.<!proto.verifier.AliveReq.LiveMeta>|undefined} value  */
proto.verifier.AliveReq.prototype.setLiveList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.AliveReq.prototype.clearLiveList = function() {
  this.setLiveList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.AliveReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.AliveReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.AliveReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.AliveReq.LiveMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.AliveReq.LiveMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.AliveReq.LiveMeta.displayName = 'proto.verifier.AliveReq.LiveMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.AliveReq.LiveMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.AliveReq.LiveMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.AliveReq.LiveMeta} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.AliveReq.LiveMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    image1: (f = msg.getImage1()) && proto.verifier.Image.toObject(includeInstance, f),
    image2: (f = msg.getImage2()) && proto.verifier.Image.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.AliveReq.LiveMeta}
 */
proto.verifier.AliveReq.LiveMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.AliveReq.LiveMeta;
  return proto.verifier.AliveReq.LiveMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.AliveReq.LiveMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.AliveReq.LiveMeta}
 */
proto.verifier.AliveReq.LiveMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.setImage1(value);
      break;
    case 3:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.setImage2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.AliveReq.LiveMeta} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveReq.LiveMeta.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.AliveReq.LiveMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveReq.LiveMeta.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getImage1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getImage2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.AliveReq.LiveMeta} The clone.
 */
proto.verifier.AliveReq.LiveMeta.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.AliveReq.LiveMeta} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string type = 1;
 * @return {string}
 */
proto.verifier.AliveReq.LiveMeta.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.AliveReq.LiveMeta.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.AliveReq.LiveMeta.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveReq.LiveMeta.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Image image1 = 2;
 * @return {!proto.verifier.Image}
 */
proto.verifier.AliveReq.LiveMeta.prototype.getImage1 = function() {
  return /** @type{!proto.verifier.Image} */ (
    jspb.Message.getWrapperField(this, proto.verifier.Image, 2, 1));
};


/** @param {proto.verifier.Image|undefined} value  */
proto.verifier.AliveReq.LiveMeta.prototype.setImage1 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.verifier.AliveReq.LiveMeta.prototype.clearImage1 = function() {
  this.setImage1(undefined);
};


/**
 * required Image image2 = 3;
 * @return {!proto.verifier.Image}
 */
proto.verifier.AliveReq.LiveMeta.prototype.getImage2 = function() {
  return /** @type{!proto.verifier.Image} */ (
    jspb.Message.getWrapperField(this, proto.verifier.Image, 3, 1));
};


/** @param {proto.verifier.Image|undefined} value  */
proto.verifier.AliveReq.LiveMeta.prototype.setImage2 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.verifier.AliveReq.LiveMeta.prototype.clearImage2 = function() {
  this.setImage2(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.AliveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.AliveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.AliveRes.displayName = 'proto.verifier.AliveRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.AliveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.AliveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.AliveRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.AliveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    lives: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.AliveRes}
 */
proto.verifier.AliveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.AliveRes;
  return proto.verifier.AliveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.AliveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.AliveRes}
 */
proto.verifier.AliveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLives(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.AliveRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.AliveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.AliveRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getLives();
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.AliveRes} The clone.
 */
proto.verifier.AliveRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.AliveRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.AliveRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.AliveRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.AliveRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.AliveRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.AliveRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.AliveRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.AliveRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.AliveRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.AliveRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string lives = 4;
 * @return {string?}
 */
proto.verifier.AliveRes.prototype.getLives = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.verifier.AliveRes.prototype.setLives = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.AliveRes.prototype.clearLives = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.AliveRes.prototype.hasLives = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.PedestrianReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.PedestrianReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.PedestrianReq.displayName = 'proto.verifier.PedestrianReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.PedestrianReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.PedestrianReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.PedestrianReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.PedestrianReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    image: (f = msg.getImage()) && proto.verifier.Image.toObject(includeInstance, f),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.PedestrianReq}
 */
proto.verifier.PedestrianReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.PedestrianReq;
  return proto.verifier.PedestrianReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.PedestrianReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.PedestrianReq}
 */
proto.verifier.PedestrianReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.PedestrianReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.PedestrianReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.PedestrianReq} The clone.
 */
proto.verifier.PedestrianReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.PedestrianReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.PedestrianReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.PedestrianReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.PedestrianReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.PedestrianReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.PedestrianReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.PedestrianReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.PedestrianReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.PedestrianReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Image image = 4;
 * @return {!proto.verifier.Image}
 */
proto.verifier.PedestrianReq.prototype.getImage = function() {
  return /** @type{!proto.verifier.Image} */ (
    jspb.Message.getWrapperField(this, proto.verifier.Image, 4, 1));
};


/** @param {proto.verifier.Image|undefined} value  */
proto.verifier.PedestrianReq.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.verifier.PedestrianReq.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.PedestrianReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.PedestrianReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.PedestrianReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.PedestrianRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.PedestrianRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.PedestrianRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.PedestrianRes.displayName = 'proto.verifier.PedestrianRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.PedestrianRes.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.PedestrianRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.PedestrianRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.PedestrianRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.PedestrianRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    personnums: jspb.Message.getField(msg, 4),
    locationsList: jspb.Message.toObjectList(msg.getLocationsList(),
    proto.verifier.PedestrianRes.Location.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.PedestrianRes}
 */
proto.verifier.PedestrianRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.PedestrianRes;
  return proto.verifier.PedestrianRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.PedestrianRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.PedestrianRes}
 */
proto.verifier.PedestrianRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPersonnums(value);
      break;
    case 5:
      var value = new proto.verifier.PedestrianRes.Location;
      reader.readMessage(value,proto.verifier.PedestrianRes.Location.deserializeBinaryFromReader);
      msg.getLocationsList().push(value);
      msg.setLocationsList(msg.getLocationsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.PedestrianRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.PedestrianRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getPersonnums();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = this.getLocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.verifier.PedestrianRes.Location.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.PedestrianRes} The clone.
 */
proto.verifier.PedestrianRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.PedestrianRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.PedestrianRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.PedestrianRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.PedestrianRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.PedestrianRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.PedestrianRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.PedestrianRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.PedestrianRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional sint32 personNums = 4;
 * @return {number?}
 */
proto.verifier.PedestrianRes.prototype.getPersonnums = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.verifier.PedestrianRes.prototype.setPersonnums = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.PedestrianRes.prototype.clearPersonnums = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.prototype.hasPersonnums = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Location locations = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.PedestrianRes.Location>}
 */
proto.verifier.PedestrianRes.prototype.getLocationsList = function() {
  return /** @type{!Array.<!proto.verifier.PedestrianRes.Location>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.PedestrianRes.Location, 5));
};


/** @param {Array.<!proto.verifier.PedestrianRes.Location>|undefined} value  */
proto.verifier.PedestrianRes.prototype.setLocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.verifier.PedestrianRes.prototype.clearLocationsList = function() {
  this.setLocationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.PedestrianRes.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.PedestrianRes.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.PedestrianRes.Location.displayName = 'proto.verifier.PedestrianRes.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.PedestrianRes.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.PedestrianRes.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.PedestrianRes.Location} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.PedestrianRes.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getField(msg, 1),
    left: jspb.Message.getField(msg, 2),
    top: jspb.Message.getField(msg, 3),
    width: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.PedestrianRes.Location}
 */
proto.verifier.PedestrianRes.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.PedestrianRes.Location;
  return proto.verifier.PedestrianRes.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.PedestrianRes.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.PedestrianRes.Location}
 */
proto.verifier.PedestrianRes.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.PedestrianRes.Location} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianRes.Location.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.PedestrianRes.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.PedestrianRes.Location.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHeight();
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = this.getLeft();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getTop();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getWidth();
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.PedestrianRes.Location} The clone.
 */
proto.verifier.PedestrianRes.Location.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.PedestrianRes.Location} */ (jspb.Message.cloneMessage(this));
};


/**
 * required sint32 height = 1;
 * @return {number}
 */
proto.verifier.PedestrianRes.Location.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.Location.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.PedestrianRes.Location.prototype.clearHeight = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.Location.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 left = 2;
 * @return {number}
 */
proto.verifier.PedestrianRes.Location.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.Location.prototype.setLeft = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.PedestrianRes.Location.prototype.clearLeft = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.Location.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 top = 3;
 * @return {number}
 */
proto.verifier.PedestrianRes.Location.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.Location.prototype.setTop = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.PedestrianRes.Location.prototype.clearTop = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.Location.prototype.hasTop = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 width = 4;
 * @return {number}
 */
proto.verifier.PedestrianRes.Location.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.verifier.PedestrianRes.Location.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.PedestrianRes.Location.prototype.clearWidth = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.PedestrianRes.Location.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.HairReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.HairReq.repeatedFields_, null);
};
goog.inherits(proto.verifier.HairReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.HairReq.displayName = 'proto.verifier.HairReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.HairReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.HairReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.HairReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.HairReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.HairReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.verifier.Image.toObject, includeInstance),
    format: !msg.hasFormat() ? 2 : jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.HairReq}
 */
proto.verifier.HairReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.HairReq;
  return proto.verifier.HairReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.HairReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.HairReq}
 */
proto.verifier.HairReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = new proto.verifier.Image;
      reader.readMessage(value,proto.verifier.Image.deserializeBinaryFromReader);
      msg.getImagesList().push(value);
      msg.setImagesList(msg.getImagesList());
      break;
    case 5:
      var value = /** @type {!proto.verifier.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.HairReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.HairReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.HairReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.HairReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.verifier.Image.serializeBinaryToWriter
    );
  }
  f = this.getFormat();
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.HairReq} The clone.
 */
proto.verifier.HairReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.HairReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.HairReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.HairReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.HairReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.HairReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.HairReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.HairReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.HairReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.HairReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.HairReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Image images = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.verifier.Image>}
 */
proto.verifier.HairReq.prototype.getImagesList = function() {
  return /** @type{!Array.<!proto.verifier.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.verifier.Image, 4));
};


/** @param {Array.<!proto.verifier.Image>|undefined} value  */
proto.verifier.HairReq.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.verifier.HairReq.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * required Format format = 5;
 * @return {!proto.verifier.Format}
 */
proto.verifier.HairReq.prototype.getFormat = function() {
  return /** @type {!proto.verifier.Format} */ (!this.hasFormat() ? 2 : jspb.Message.getField(this, 5));
};


/** @param {proto.verifier.Format|undefined} value  */
proto.verifier.HairReq.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.HairReq.prototype.clearFormat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairReq.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.HairRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.verifier.HairRes.repeatedFields_, null);
};
goog.inherits(proto.verifier.HairRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.HairRes.displayName = 'proto.verifier.HairRes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.verifier.HairRes.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.HairRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.HairRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.HairRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.HairRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    hairList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.HairRes}
 */
proto.verifier.HairRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.HairRes;
  return proto.verifier.HairRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.HairRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.HairRes}
 */
proto.verifier.HairRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getHairList().push(value);
      msg.setHairList(msg.getHairList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.HairRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.HairRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.HairRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.HairRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getHairList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.HairRes} The clone.
 */
proto.verifier.HairRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.HairRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.HairRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.HairRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.HairRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.HairRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.HairRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.HairRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.HairRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.HairRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.HairRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string hair = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.verifier.HairRes.prototype.getHairList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>|undefined} value  */
proto.verifier.HairRes.prototype.setHairList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.verifier.HairRes.prototype.clearHairList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.HairRes.prototype.hasHairList = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RepoInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.RepoInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RepoInfoReq.displayName = 'proto.verifier.RepoInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RepoInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RepoInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RepoInfoReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RepoInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_interface: jspb.Message.getField(msg, 1),
    apikey: jspb.Message.getField(msg, 2),
    requestid: jspb.Message.getField(msg, 3),
    groupid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RepoInfoReq}
 */
proto.verifier.RepoInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RepoInfoReq;
  return proto.verifier.RepoInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RepoInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RepoInfoReq}
 */
proto.verifier.RepoInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInterface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RepoInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RepoInfoReq.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RepoInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RepoInfoReq.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInterface();
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getApikey();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RepoInfoReq} The clone.
 */
proto.verifier.RepoInfoReq.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RepoInfoReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 interface = 1;
 * @return {number}
 */
proto.verifier.RepoInfoReq.prototype.getInterface = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.verifier.RepoInfoReq.prototype.setInterface = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.RepoInfoReq.prototype.clearInterface = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoReq.prototype.hasInterface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string apiKey = 2;
 * @return {string}
 */
proto.verifier.RepoInfoReq.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.verifier.RepoInfoReq.prototype.setApikey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.RepoInfoReq.prototype.clearApikey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoReq.prototype.hasApikey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string requestId = 3;
 * @return {string?}
 */
proto.verifier.RepoInfoReq.prototype.getRequestid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.verifier.RepoInfoReq.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RepoInfoReq.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoReq.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string groupId = 4;
 * @return {string?}
 */
proto.verifier.RepoInfoReq.prototype.getGroupid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.verifier.RepoInfoReq.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.RepoInfoReq.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoReq.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.verifier.RepoInfoRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.verifier.RepoInfoRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.verifier.RepoInfoRes.displayName = 'proto.verifier.RepoInfoRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.verifier.RepoInfoRes.prototype.toObject = function(opt_includeInstance) {
  return proto.verifier.RepoInfoRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.verifier.RepoInfoRes} msg The msg instance to transform.
 * @return {!Object}
 */
proto.verifier.RepoInfoRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: jspb.Message.getField(msg, 1),
    timeused: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    groupid: jspb.Message.getField(msg, 4),
    regnums: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.verifier.RepoInfoRes}
 */
proto.verifier.RepoInfoRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.verifier.RepoInfoRes;
  return proto.verifier.RepoInfoRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.verifier.RepoInfoRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.verifier.RepoInfoRes}
 */
proto.verifier.RepoInfoRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimeused(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRegnums(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.verifier.RepoInfoRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RepoInfoRes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.verifier.RepoInfoRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.verifier.RepoInfoRes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimeused();
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = this.getErrormessage();
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = this.getGroupid();
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getRegnums();
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.verifier.RepoInfoRes} The clone.
 */
proto.verifier.RepoInfoRes.prototype.cloneMessage = function() {
  return /** @type {!proto.verifier.RepoInfoRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string requestId = 1;
 * @return {string}
 */
proto.verifier.RepoInfoRes.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.verifier.RepoInfoRes.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.verifier.RepoInfoRes.prototype.clearRequestid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoRes.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 timeUsed = 2;
 * @return {number}
 */
proto.verifier.RepoInfoRes.prototype.getTimeused = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.verifier.RepoInfoRes.prototype.setTimeused = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.verifier.RepoInfoRes.prototype.clearTimeused = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoRes.prototype.hasTimeused = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 errorMessage = 3;
 * @return {number}
 */
proto.verifier.RepoInfoRes.prototype.getErrormessage = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.verifier.RepoInfoRes.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.verifier.RepoInfoRes.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoRes.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string groupId = 4;
 * @return {string?}
 */
proto.verifier.RepoInfoRes.prototype.getGroupid = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.verifier.RepoInfoRes.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.verifier.RepoInfoRes.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoRes.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional sint32 regNums = 5;
 * @return {number?}
 */
proto.verifier.RepoInfoRes.prototype.getRegnums = function() {
  return /** @type {number?} */ (jspb.Message.getField(this, 5));
};


/** @param {number?|undefined} value  */
proto.verifier.RepoInfoRes.prototype.setRegnums = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.verifier.RepoInfoRes.prototype.clearRegnums = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.verifier.RepoInfoRes.prototype.hasRegnums = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.verifier.Format = {
  MAT: 0,
  RGB: 1,
  YUV: 2,
  JPEG: 3
};

goog.object.extend(exports, proto.verifier);
